# The root item of the EmbeddedAgent configuration is the Device.
# An embedded agent can be composed of one to many devices. A device is any external element (physical or virtual) which sensors and actuators are connected to.
# In this example, the agent is composed of a single device, that is a ROS core identified as "sample_roscore".
- device_id: ros_device_1 #device identifier. It is up to the designer to choose this name.
  #className: the class that implements the interface between the parception/action systems and the device.
  #           This class provides means to convert (i) sensor values in perceptions and (ii) action of the agents and actuations performed by the physical actuators.
  #           Different interfaces can be implemented for different types of devices.
  className:  embedded.mas.bridges.ros.RosMaster
  # A device contains a microcontroller, that is an interface that provides access to external devices to get percepts and perform actuations
  # Different microcontrollers have different parameters depending on their nature. For example, serial devices like Arduino require to configure serial ports and baudrates.
  # In this example, the microcontroller is a Java-ROS interface with parameters related to topics and services.
  microcontroller: 
      id: ros1 #microcontroller identifier. It is up to the designer to choose this name.
      connectionString: ws://localhost:9090 #connection with ROS
      #className: The class that implements the interface with the microcontroller.
      #           This class provides means to read from and write to the microcontroller. 
      #           Different interfaces can be implemented for different types of microcontrollers.
      className: DefaultRos4EmbeddedMas  
      #perceptionTopics: List of topics whose values are converted into perceptions.
      #                  Each topic requires to define its name and its type.   
  perceptionTopics:         
      - topicName: turtle1/pose
        topicType: turtlesim/Pose
        beliefName: turtle_position
  actuators:
      - actuator_id: actuator1
        serviceRequestActuations:
          - actuation_id: move
            serviceName: /turtle1/teleport_relative
            parameters:
              - linear
              - angular
          - actuation_id: log
            serviceName:  /turtlesim/get_loggers
            
- actions:
  - move_turtle: 
    - [ros_device_1.actuator1.move]            
  - get_loggers:
    - [ros_device_1.actuator1.log]